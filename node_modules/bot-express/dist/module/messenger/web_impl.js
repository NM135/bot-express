"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MessengerLine = require("./line");
class MessengerWeb {
    sendMessage;
    constructor(options) {
        this.sendMessage = options.sendMessage;
    }
    static extract_events(body) {
        return [body];
    }
    static extract_beacon_event_type(event) {
        throw new Error("Method not implemented.");
    }
    static extract_param_value(event) {
        let param_value;
        switch (event.type) {
            case "message":
                if (event.message.type == "text") {
                    param_value = event.message.text;
                }
                else {
                    param_value = event.message;
                }
                break;
            case "postback":
                param_value = event.postback;
                break;
        }
        return param_value;
    }
    static extract_postback_payload(event) {
        if (event.type === "postback") {
            return event.postback.data;
        }
        else {
            throw Error('no postback event given. cannot extract.');
        }
    }
    static check_supported_event_type(event, flow) {
        switch (flow) {
            case "start_conversation":
                if (event.type == "message" || event.type == "postback") {
                    return true;
                }
                return false;
            case "reply":
                if (event.type == "message" || event.type == "postback") {
                    return true;
                }
                return false;
            case "btw":
                if (event.type == "message" || event.type == "postback") {
                    return true;
                }
                return false;
            default:
                return false;
        }
    }
    static extract_message(event) {
        switch (event.type) {
            case "message":
                return event.message;
            case "postback":
                return event.postback;
        }
    }
    static extract_message_text(event) {
        switch (event.type) {
            case "message":
                switch (event.message.type) {
                    case 'text':
                        return event.message.text;
                    default:
                        return undefined;
                }
            case "postback":
                return event.postback.data;
        }
    }
    static extract_sender_id(event) {
        return event.userId;
    }
    static extract_session_id(event) {
        return event.userId;
    }
    static extract_to_id(event) {
        return event.userId;
    }
    static identify_event_type(event) {
        if (!event.type) {
            return "unidentified";
        }
        return event.type;
    }
    static identify_message_type(message) {
        return message.type;
    }
    static async compile_message(format, messageType, message) {
        if (format === 'line') {
            return message; // web message format is compatible LINE message format
        }
        else if (format === 'facebook') {
            return MessengerLine._compile_message_from_facebook_format(messageType, message);
        }
        else {
            throw Error(`unsupported format ${format} given to web messenger`);
        }
    }
    static create_switch_skill_event(event, intent, language) {
        if (event.type === 'bot-express:push') {
            return {
                type: "bot-express:push",
                channelId: event.channelId,
                userId: event.userId,
                intent: intent,
                language: language
            };
        }
        else {
            return {
                type: "postback",
                channelId: event.channelId,
                userId: event.userId,
                postback: {
                    data: JSON.stringify({
                        type: "intent",
                        intent: intent,
                        language: language
                    })
                }
            };
        }
    }
    validate_signature(req) {
        // do nothing for now
        return true;
    }
    extract_channel_id(event) {
        return event.channelId;
    }
    reply_to_collect(event, messages) {
        return this.reply(event, messages);
    }
    async reply(event, messages) {
        return await this.send(event, event.userId, messages);
    }
    async send(event, recipient_id, messages) {
        this.sendMessage(recipient_id, messages);
        return {};
    }
    multicast(event, recipient_ids, messages) {
        throw new Error("Unsupported operation");
    }
    async refresh_token() {
        // nop
        return;
    }
    get_secret() {
        throw new Error("Unsupported operation");
    }
    pass_through(webhook, secret, event) {
        // This is for LINE only but it could be called.
        // NOP.
    }
}
exports.default = MessengerWeb;
//# sourceMappingURL=web_impl.js.map